name: Deploy to Production

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on semantic version tags (v1.0.0, v1.2.3, etc.)

permissions:
  contents: read
  actions: read
  checks: write

jobs:
  deployment-readiness:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate Docker build configuration
        run: |
          echo "🔍 Validating Dockerfile and build context..."
          if [ ! -f "services/ingestion/Dockerfile" ]; then
            echo "::error::Dockerfile not found at services/ingestion/Dockerfile"
            exit 1
          fi
          if [ ! -f "pyproject.toml" ]; then
            echo "::error::Workspace configuration not found"
            exit 1
          fi
          echo "✅ Build configuration validated"

      - name: Validate environment connectivity
        run: |
          echo "🌐 Testing external connectivity for deployment..."
          # Test essential external services connectivity
          curl -s --max-time 10 https://api.github.com/zen || echo "⚠️  GitHub API connectivity issue"
          curl -s --max-time 10 https://pypi.org/simple/ || echo "⚠️  PyPI connectivity issue"
          echo "✅ External connectivity validated"

  deploy-production:
    needs: deployment-readiness
    runs-on: ubuntu-latest
    environment: production
    permissions:
      contents: read
    steps:
      - name: Validate tag format
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          echo "🏷️  Deploying tag: $TAG"
          if [[ ! $TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "::error::Invalid tag format. Use semantic versioning (v1.0.0)"
            exit 1
          fi

      - name: Trigger production deployment via webhook
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          echo "🚀 Triggering production deployment for $TAG..."
          echo "📍 Production webhook trigger initiated"
          echo "🕒 Commit: ${{ github.sha }}"
          echo "👤 Author: ${{ github.actor }}"
          # Trigger Coolify production deployment webhook
          if [ -n "${{ secrets.COOLIFY_PRODUCTION_WEBHOOK }}" ]; then
            echo "📡 Calling Coolify production webhook..."
            curl -X POST "${{ secrets.COOLIFY_PRODUCTION_WEBHOOK }}" \
              -H "Content-Type: application/json" \
              -d "{\"ref\": \"$TAG\", \"sha\": \"${{ github.sha }}\", \"actor\": \"${{ github.actor }}\"}" \
              --fail --silent --show-error
            echo "✅ Production webhook triggered successfully"
          else
            echo "⚠️  COOLIFY_PRODUCTION_WEBHOOK secret not configured"
            echo "🔧 Please add production webhook URL to repository secrets"
            exit 1
          fi

      - name: Wait for production deployment
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          echo "⏳ Waiting for Coolify to process production deployment of $TAG..."
          echo "ℹ️  Production deployment triggered by webhook"
          sleep 60
          echo "✅ Production deployment initiation period completed"

      - name: Validate production deployment
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          echo "🏥 Validating production deployment of $TAG..."
          echo "⚠️  Production URL validation pending - manual verification required"
          echo "🔍 Please verify deployment in Coolify dashboard"
          echo "📋 Manual checklist:"
          echo "   - Service is running in production environment"
          echo "   - Health endpoint /healthz responds successfully"
          echo "   - SSL certificate is valid"
          echo "   - No error logs in production"
          echo "✅ Production deployment process completed"

      - name: Create GitHub Release
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          echo "📝 Creating GitHub release for $TAG..."
          echo "## Release $TAG" > release-notes.md
          echo "Deployed at: $(date -u)" >> release-notes.md
          echo "Commit: $GITHUB_SHA" >> release-notes.md
          echo "Environment: Production" >> release-notes.md
          echo "✅ Release notes prepared - manual GitHub release creation required"
